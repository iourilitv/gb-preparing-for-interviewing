package ru.geekbrains.lesson2.hw.task1;

import java.util.Arrays;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class MyLinkedList<E> {
    private static class Node<E> {
        E item;
        Node<E> next;
        Node<E> prev;

        Node(Node<E> prev, E element, Node<E> next) {
            this.item = element;
            this.next = next;
            this.prev = prev;
        }
    }

//    private static class MyArray<E> {
//        private final Node<E>[] objArray;
//        public final int length;
//
//        // class constructor
//        public MyArray(Class<Node> dataType, int length){
//            // create a new array with the specified data type and length at runtime using reflection
//            this.objArray = (Node<E>[]) java.lang.reflect.Array.newInstance(dataType, length);
//            this.length = length;
//        }
//
//        // get element at objArray[i]
//        Node<E> get(int i) {
//            return objArray[i];
//        }
//
//        // assign e to objArray[i]
//        void set(int i, Node<E> e) {
//            objArray[i] = e;
//        }
//
//        @Override
//        public String toString() {
//            return Arrays.toString(objArray);
//        }
//    }

    //generic array class
    static class Arr<T> {
        T[] tArray;

        Arr(T[] myArray) {
            tArray = myArray;
        }

        @Override
        public String toString() {
            return Arrays.toString(tArray);
        }
    }

    int size = 0;
    Node<E> first;
    Node<E> last;
    int modCount = 0;
//    Node<E>[] array;
//    Arr<?>[] arr;
    Arr<Node<? extends E>> arr;

    public MyLinkedList(Class<?> classType) {
//        arr = new Arr<?>[10];
        Node<Integer> node = new Node<>(null, 5, null);
        arr = new Arr<Node<Integer>>(new Node<Integer>[10]);
//        this.array = new Node<E>[10];
//        Class<Node> nodeClass = Node.class;
//        final int length = 5;
//        // create array with Integer as data type
//        MyArray<E> myArray = new MyArray<E>(nodeClass, 5);

//        System.out.print("Generic Array<Integer>:" + " ");
//        for (int i = 0; i < length; i++)
//            int_Array.set(i, i + 10);
//        System.out.println(int_Array);


    }

    private void linkFirst(E e) {
        final Node<E> f = first;
        final Node<E> newNode = new Node<>(null, e, f);
        first = newNode;
        if (f == null)
            last = newNode;
        else
            f.prev = newNode;
        size++;
        modCount++;
    }

    private void linkLast(E e) {
        final Node<E> l = last;
        final Node<E> newNode = new Node<>(l, e, null);
        last = newNode;
        if (l == null)
            first = newNode;
        else
            l.next = newNode;
        size++;
        modCount++;
    }

    public E get(int index) {
        try {
//            return listIterator(index).next();
            return (E) arr[index];
        } catch (NoSuchElementException exc) {
            throw new IndexOutOfBoundsException("Index: "+index);
        }
    }

    public E peekFirst() {
        final Node<E> f = first;
        return (f == null) ? null : f.item;
    }

    public E peekLast() {
        final Node<E> l = last;
        return (l == null) ? null : l.item;
    }

//    public E set(int index, E element) {
//        try {
////            ListIterator<E> e = listIterator(index);
////            E oldVal = e.next();
////            e.set(element);
////            return oldVal;
//            E oldVal = (E) arr[index + 1];
//            arr
//        } catch (NoSuchElementException exc) {
//            throw new IndexOutOfBoundsException("Index: " + index);
//        }
//    }

    public void add(int index, E element) {
        try {
            listIterator(index).add(element);
        } catch (NoSuchElementException exc) {
            throw new IndexOutOfBoundsException("Index: " + index);
        }
    }

    public E remove(int index) {
        try {
//            ListIterator<E> e = listIterator(index);
//            E outCast = e.next();
//            e.remove();

            return outCast;
        } catch (NoSuchElementException exc) {
            throw new IndexOutOfBoundsException("Index: "+index);
        }
    }

//    public Iterator<E> iterator() {
//        return listIterator();
//    }


//    public ListIterator<E> listIterator(final int index) {
//        rangeCheckForAdd(index);
//
//        return new ListItr(index);
//    }

    private void rangeCheckForAdd(int index) {
        if (index < 0 || index > size())
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    private String outOfBoundsMsg(int index) {
        return "Index: "+index+", Size: "+size();
    }

    public int size() {
//        checkForComodification();
        return size;
    }
}
